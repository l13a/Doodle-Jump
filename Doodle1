#####################################################################
#
#
# Student: Xinyi Chen, 1005825136
#
# CSC258H5S Fall 2020 Assembly Final Project
 # University of Toronto, St. George
 
# Bitmap Display Configuration:
 # - Unit width in pixels: 8
 # - Unit height in pixels: 8
 # - Display width in pixels: 256
 # - Display height in pixels: 256
 # - Base Address for Display: 0x10008000 ($gp)
 #
 # Which milestone is reached in this submission?
 # (See the assignment handout for descriptions of the milestones)
 # - Milestone 5 
 #
 # Which approved additional features have been implemented?
 # (See the assignment handout for the list of additional features)
 # 1. Fancier Graphics for the Doodle, the platforms, the opponent, and the message displays
 # 2. Dynamic on-screen notifications: Displays "WOW!" after jumping on 4 platforms/reaching the level with shorter platforms. 
 #					Displays "WOW!!" after beating the Octopus opponenet/succesffully completing 5 jumps.
 # 3. Sound effect when bounce on platforms
 # 4. Lethal opponent Octopus: floats around the screen in a level in the game. If the Doodle touches the Octopus, 
 # 				then it gets poisoned and the game ends immediately.
 # 
 #
 # Any additional information that the TA needs to know:
 # - Press "s" to start the game or to restart the game after the "Bye~" screen.
 # - Since I used a buffer, the program sometimes throws an out of bound error if the Doodle jumps too far above the top of the Bitmap. 
 # Please try to ensure that the Doodle stays within the Bitmap. If the error happens, you may just re-run it and start the game again.
 #
 #####################################################################
 
 
 .data
 	topLeftAddress: .word 0x10008000
 	bottomRightAddress: .word 0x10008ffc
 	
 	doodleAddress: .word 0x10008F3C
 	
 	firstPlatform: .word 0x10008000
 	secondPlatform: .word 0x10008400
 	thirdPlatform: .word 0x10008800
 	forthPlatform: .word 0x10008C00
 	space: .word 0x400
 	
 	platform_green: .word 0x21a675
 	platform_dark: .word 0x057748
 	  
 	doodle_pink: .word 0x758a99
 	doodle_black: .word 0x50616d
 	sky_blue: .word 0xe0f0e9
 	
 	gameOverColour: .word 0x003472
 	wowColour: .word 0xbe002f
 	
 	canvas: .word 0:4092
 	
 	pitch: .byte 72 # Put the notes to your song in a MIPS “array”
	duration: .byte 100
	instrument: .byte 58
	volume: .byte 100
 	
 	score: .word 0
 	
 	opponentAddress: .word 0x10008C00
 	opponent_body: .word 0xfa8c35
 	opponent_eyes: .word 0xff7500
 	
 	
 	
 	
 .text	
 setup:
 	addi $s7, $zero, -1
 	la $t0, score
 	sw $zero, 0($t0)
 	
 	#reset doodleAddress
 	la $t0, doodleAddress
 	addi $t1, $zero, 0x10008F3C
 	sw $t1, 0($t0)
 	
 	#set platform locations to randomly generated places in their rows
	addi $t6, $zero, 0x10008000
	jal random_address_generator
	la $t1, firstPlatform #update firstPlatform
	sw $t9, 0($t1)
	
	addi $t6, $zero, 0x10008400
	jal random_address_generator
	la $t1, secondPlatform #update secondPlatform
	sw $t9, 0($t1)
	
	addi $t6, $zero, 0x10008800
	jal random_address_generator
	la $t1, thirdPlatform #update thirdPlatform
	sw $t9, 0($t1)
	
	addi $t6, $zero, 0x10008C00
	jal random_address_generator
	la $t1, forthPlatform #update forthPlatform
	sw $t9, 0($t1)
	
	
 	lw $t8, 0xffff0000	#check user input
	beq $t8, 1, keyboard_start
	j setup
keyboard_start:
	lw $t7, 0xffff0004 	#check if pressed s
	beq $t7, 0x73, respond_to_S
	j setup			#if not, check input again
respond_to_S:
	j main			#if start, jump to main and start game
 	
main:	
	lw $s0, topLeftAddress
	lw $s1, bottomRightAddress
	lw $s2, doodleAddress
	
	
#1. CHECK KEYBOARD INPUT
	lw $t8, 0xffff0000
	beq $t8, 1, keyboard_input
	j end_input
keyboard_input: 
	lw $t7, 0xffff0004		#check input
	beq $t7, 0x6A, respond_to_J
	beq $t7, 0x6B, respond_to_K
	j end_input
respond_to_J: 
	jal doodle_left
	la $t1, doodleAddress #update doodleAddress
	sw $s2, 0($t1)
	j end_input
respond_to_K: 
	jal doodle_right
	la $t1, doodleAddress #update doodleAddress
	sw $s2, 0($t1)
	j end_input
end_input:
	
#update location of Doodle
	add $t7, $zero, 10
	bge $s7, $t7, finish_jump
	jal doodle_up
	#lw $t0, topLeftAddress
	#ble $t0, $s2, update_address #if location not over top left, update doodleAddress
	#j finish_jump
#update_address:
	la $t1, doodleAddress #update doodleAddress
	sw $s2, 0($t1)

	#make platforms go down
	lw $t6, firstPlatform
	jal platform_down
	la $t1, firstPlatform #update first platform
	sw $t6, 0($t1)
	
	lw $t6, secondPlatform	#make platforms go down
	jal platform_down
	la $t1, secondPlatform #update second platform
	sw $t6, 0($t1)
	
	lw $t6, thirdPlatform	#make platforms go down
	jal platform_down
	la $t1, thirdPlatform #update second platform
	sw $t6, 0($t1)
	
	lw $t6, forthPlatform	#make platforms go down
	jal platform_down
	la $t1, forthPlatform  #update second platform
	sw $t6, 0($t1)
	
	j end_update_doodle_location
finish_jump:
	jal doodle_down #doodle starts going down
	la $t1, doodleAddress #update doodleAddress
	sw $s2, 0($t1)
	
	#TODO: CHECK IF DOODLE'S LOCATION IS OUT OF BOUND
	lw $t0, doodleAddress
	lw $t1, bottomRightAddress
	bge $t0, $t1, game_over #if doodleAddress > bound, display game over, wait for keyboard import to restart
	j dont_game_over #else: do nothing continue to check for collision
	
game_over:
	lw $t4, gameOverColour
	lw $t9, topLeftAddress
	jal display_game_over
	        
	j setup
	
dont_game_over:
#check for collision events

	lw $t6, doodleAddress
	lw $t7, opponent_body
	jal step_on_opponent
	addi $t3, $zero, 1	#$t3 = 1 for comparison for step_on_opponent's result
	beq $t5, $t3, dead 	#game over
	j not_dead
dead:
	addi $t0, $zero, 0x10008F3C
	la $t1, doodleAddress
	sw $t0, 0($t1)
	j game_over
not_dead:
	lw $t6, doodleAddress
	lw $t7, platform_green
	jal step_on_platform
	addi $t3, $zero, 1	#$t3 = 1 for comparison for step_on_platform's result
	beq $t5, $t3, rejump #branch if step on platform: set currentHeight to -1
	j dont_rejump
rejump:
	li $v0, 31 
	la $t0, pitch
	addi $t0, $t0, 12
	la $t1, duration 
	la $t2, instrument
	la $t3, volume 
	move $a0, $t0 
	move $a1, $t1 
	move $a2, $t2
	move $a3, $t3 
	syscall 
	
	addi $s7, $zero, -1
	
	lw $t0, score
	addi $t0, $t0, 1
	la $t1, score  #update score
	sw $t0, 0($t1)
	
dont_rejump:	

end_update_doodle_location:		
			
		
			
		
#2. UPDATE LOCATION OF PLATFORMS AND OTHER OBJECTS
	lw $t0, score
	addi $t1, $zero, 5
	beq $t0, $t1, generate_opponent
	j dont_generate_opponent
generate_opponent: 
	addi $t6, $zero, 0x10008C00
	jal random_address_generator
	la $t1, opponentAddress
	sw $t9, 0($t1)
dont_generate_opponent:
	lw $t0, forthPlatform
	lw $t1, bottomRightAddress
	bge $t0, $t1, generate_new_platform #if (forthPlatform over screen), jump to new random platform generator on top
	j dont_generate_new_platform #else: dont update
	
	
generate_new_platform:
	#update the previous platforms to one up
	lw $t3, thirdPlatform #copy third platform's address
	la $t4, forthPlatform #update forthPlatform to be the orginial thrid platform
	sw $t3, 0($t4)
	
	lw $t3, secondPlatform 
	la $t4, thirdPlatform 
	sw $t3, 0($t4)
	
	lw $t3, firstPlatform 
	la $t4, secondPlatform 
	sw $t3, 0($t4)
	
	addi $t6, $zero, 0x10008000
	jal random_address_generator
	la $t1, firstPlatform #update firstPlatform to this new randomly generated address
	sw $t9, 0($t1)
	
dont_generate_new_platform:
	

#3. REDRAW THE SCREEN
	
	#DRAW ON CANVAS FIRST
	
	#draw the sky background
	la $t0, canvas
	addi $t1, $t0, 4096
	lw $t3, sky_blue # $t3: colour sky_blue	  
	jal draw_sky_fxn #call draw sky fxn to paint the background
	
	#draw the platforms based on addresses stored in data
	lw $t2 platform_green
	lw $t3, platform_dark
	lw $t9, firstPlatform
	lw $t0, topLeftAddress
	sub $t9, $t9, $t0  	#calculate offset of this platform location
	la $t1, canvas
	add $t9, $t1, $t9
	jal draw_platform_fxn
	
	lw $t9, secondPlatform
	lw $t0, topLeftAddress
	sub $t9, $t9, $t0  	#calculate offset of this platform location
	la $t1, canvas
	add $t9, $t1, $t9
	jal draw_platform_fxn
	
	lw $t2 platform_green
	lw $t9, thirdPlatform
	lw $t0, topLeftAddress
	sub $t9, $t9, $t0  	#calculate offset of this platform location
	la $t1, canvas
	add $t9, $t1, $t9
	jal draw_platform_fxn
	
	lw $t2 platform_green
	lw $t9, forthPlatform
	lw $t0, topLeftAddress
	sub $t9, $t9, $t0  	#calculate offset of this platform location
	la $t1, canvas
	add $t9, $t1, $t9
	jal draw_platform_fxn
	
	#draw the doodle based on address passed in $s2	
	lw $t2, doodle_pink # $t2: colour doodle_pink 
	lw $t3, doodle_black
	lw $s2, doodleAddress
	lw $t0, topLeftAddress
	sub $s2, $s2, $t0  	#calculate offset of this doodle location
	la $t1, canvas
	add $s2, $t1, $s2 	#add offset to canvas, store in $s2, this is the doodle location in canvas
	jal draw_doodle_fxn
	
	
	lw $t0, score
	addi $t1, $zero, 5
	beq $t0, $t1, draw_opponent
	j dont_draw_opponent
draw_opponent: 
	lw $s2, opponentAddress
	lw $t2, opponent_body
	lw $t3, opponent_eyes
	lw $t0, topLeftAddress
	sub $s2, $s2, $t0  	#calculate offset of this doodle location
	la $t1, canvas
	add $s2, $t1, $s2 	#add offset to canvas, store in $s2, this is the doodle location in canvas
	jal draw_opponent_fxn
dont_draw_opponent:
	lw $t0, score
	addi $t1, $zero, 4
	beq $t0, $t1, draw_wow
	j dont_draw_wow
draw_wow:
	add $t9, $zero, $zero
	lw $t3, wowColour
	la $t1, canvas
	add $t9, $t1, $zero
	jal display_wow
dont_draw_wow:
	lw $t0, score
	addi $t1, $zero, 6
	beq $t0, $t1, draw_wow2
	j dont_draw_wow2
draw_wow2:
	add $t9, $zero, $zero
	lw $t3, wowColour
	la $t1, canvas
	add $t9, $t1, $zero
	jal display_wow2
dont_draw_wow2:		
	
	#DRAW ON BITMAP NEXT
	jal copy_to_bitmap
	
	
	
#4. SLEEP
	li $v0, 32
	li $a0, 50
	syscall
	
#5 Go back to Step 1
	j main






#FUNCTIONS
display_wow2:#param: $t3: wow colour, $t9 topLeftAddress

	#W
	sw $t3, 512($t9)
	sw $t3, 640($t9)
	sw $t3, 768($t9)
	
	sw $t3, 520($t9)
	sw $t3, 648($t9)
	sw $t3, 776($t9)
	
	sw $t3, 528($t9)
	sw $t3, 656($t9)
	sw $t3, 784($t9)
	
	sw $t3, 900($t9)
	sw $t3, 908($t9)
	
	#0
	sw $t3, 536($t9)
	sw $t3, 664($t9)
	sw $t3, 792($t9)
	sw $t3, 920($t9)
	
	sw $t3, 544($t9)
	sw $t3, 672($t9)
	sw $t3, 800($t9)
	sw $t3, 928($t9)
	
	sw $t3, 540($t9)
	sw $t3, 924($t9)
	
	#W
	sw $t3, 552($t9)
	sw $t3, 680($t9)
	sw $t3, 808($t9)
	
	sw $t3, 560($t9)
	sw $t3, 688($t9)
	sw $t3, 816($t9)
	
	sw $t3, 568($t9)
	sw $t3, 696($t9)
	sw $t3, 824($t9)
	
	sw $t3, 940($t9)
	sw $t3, 948($t9)
	
	#!
	sw $t3, 448($t9)
	sw $t3, 576($t9)
	sw $t3, 704($t9)
	
	sw $t3, 960($t9)
	
	#!
	sw $t3, 456($t9)
	sw $t3, 584($t9)
	sw $t3, 712($t9)
	
	sw $t3, 968($t9)
	
	#!
	sw $t3, 464($t9)
	sw $t3, 592($t9)
	sw $t3, 720($t9)
	
	sw $t3, 976($t9)
	
	jr $ra
	
display_wow:#param: $t3: wow colour, $t9 topLeftAddress

	#W
	sw $t3, 512($t9)
	sw $t3, 640($t9)
	sw $t3, 768($t9)
	
	sw $t3, 520($t9)
	sw $t3, 648($t9)
	sw $t3, 776($t9)
	
	sw $t3, 528($t9)
	sw $t3, 656($t9)
	sw $t3, 784($t9)
	
	sw $t3, 900($t9)
	sw $t3, 908($t9)
	
	#0
	sw $t3, 536($t9)
	sw $t3, 664($t9)
	sw $t3, 792($t9)
	sw $t3, 920($t9)
	
	sw $t3, 544($t9)
	sw $t3, 672($t9)
	sw $t3, 800($t9)
	sw $t3, 928($t9)
	
	sw $t3, 540($t9)
	sw $t3, 924($t9)
	
	#W
	sw $t3, 552($t9)
	sw $t3, 680($t9)
	sw $t3, 808($t9)
	
	sw $t3, 560($t9)
	sw $t3, 688($t9)
	sw $t3, 816($t9)
	
	sw $t3, 568($t9)
	sw $t3, 696($t9)
	sw $t3, 824($t9)
	
	sw $t3, 940($t9)
	sw $t3, 948($t9)
	
	#!
	sw $t3, 448($t9)
	sw $t3, 576($t9)
	sw $t3, 704($t9)
	
	sw $t3, 960($t9)
	
	jr $ra
	

display_game_over: #param $t4: game over colour, $t9: topLeftAddress

	#B
	sw $t4, 1040($t9)
	sw $t4, 1044($t9)
	sw $t4, 1048($t9)
	sw $t4, 1052($t9)
	sw $t4, 1056($t9)
	
	sw $t4, 1424($t9)
	sw $t4, 1428($t9)
	sw $t4, 1432($t9)
	sw $t4, 1436($t9)
	sw $t4, 1440($t9)
	
	sw $t4, 1936($t9)
	sw $t4, 1940($t9)
	sw $t4, 1944($t9)
	sw $t4, 1948($t9)
	sw $t4, 1952($t9)
	
	sw $t4, 1040($t9)
	sw $t4, 1168($t9)
	sw $t4, 1296($t9)
	sw $t4, 1424($t9)
	sw $t4, 1552($t9)
	sw $t4, 1680($t9)
	sw $t4, 1808($t9)
	sw $t4, 1936($t9)
	
	sw $t4, 1056($t9)
	sw $t4, 1184($t9)
	sw $t4, 1312($t9)
	sw $t4, 1440($t9)
	sw $t4, 1568($t9)
	sw $t4, 1696($t9)
	sw $t4, 1824($t9)
	sw $t4, 1940($t9)
	
	#Y
	sw $t4, 1072($t9)
	sw $t4, 1200($t9)
	sw $t4, 1328($t9)
	sw $t4, 1456($t9)
	
	sw $t4, 1088($t9)
	sw $t4, 1216($t9)
	sw $t4, 1344($t9)
	sw $t4, 1472($t9)
	
	sw $t4, 1596($t9)
	sw $t4, 1724($t9)
	sw $t4, 1852($t9)
	sw $t4, 1980($t9)
	
	sw $t4, 1456($t9)
	sw $t4, 1460($t9)
	sw $t4, 1464($t9)
	sw $t4, 1468($t9)
	sw $t4, 1472($t9)
	
	
	#E
	sw $t4, 1104($t9)
	sw $t4, 1108($t9)
	sw $t4, 1112($t9)
	sw $t4, 1116($t9)
	sw $t4, 1120($t9)
	
	sw $t4, 1488($t9)
	sw $t4, 1492($t9)
	sw $t4, 1496($t9)
	sw $t4, 1500($t9)
	sw $t4, 1504($t9)
	
	sw $t4, 2000($t9)
	sw $t4, 2004($t9)
	sw $t4, 2008($t9)
	sw $t4, 2012($t9)
	sw $t4, 2016($t9)
	
	sw $t4, 1104($t9)
	sw $t4, 1232($t9)
	sw $t4, 1360($t9)
	sw $t4, 1488($t9)
	sw $t4, 1616($t9)
	sw $t4, 1744($t9)
	sw $t4, 1872($t9)
	sw $t4, 2000($t9)
	
	
	#~
	sw $t4, 1516($t9)
	sw $t4, 1520($t9)
	
	sw $t4, 1640($t9)
	sw $t4, 1652($t9)
	
	sw $t4, 1784($t9)
	sw $t4, 1788($t9)
	
	
	jr $ra
	
	
	
	

platform_down: #param: $t6: start address of the platform
	addi $t6, $t6, 128
	jr $ra
		
	
doodle_up:
	#lw $t0, score
	#addi $t1, $zero, 5
	#bge $t0, $t1, faster
	addi $s2, $s2, -128
	addi $s7, $s7, 1 #update currentHeight
	jr $ra
#faster: 
	#addi $s2, $s2, -384
	#addi $s7, $s7, 1 #update currentHeight
	#jr $ra
	
	
doodle_left:
	addi $s2, $s2, -4
	jr $ra
	
doodle_right:
	addi $s2, $s2, 4
	jr $ra
	
doodle_down:
	addi $s2, $s2, 128
	jr $ra

#return $t5 = 1, if stepped on platform, return $t5 = 0 otherwise
step_on_platform:#parameters: $t6 = doodleAddress, $t7 = platform_green
	add $t4, $t6, 128 #$t4 = address right below foot of doodle
	lw $t3, 0($t4) #$t3 = colour at address $t4
	lw $t2, 4($t4)
	lw $t1, -4($t4)
	beq $t3, $t7, yes_platform
	beq $t2, $t7, yes_platform
	beq $t1, $t7, yes_platform
	add $t5, $zero, $zero
	jr $ra
yes_platform: 
	addi $t5, $zero, 1
	jr $ra
	

#return $t5 = 1, if stepped on opponent, return $t5 = 0 otherwise
step_on_opponent:#parameters: $t6 = doodleAddress, $t7 = opponentBody
	lw $t0, -128($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -132($t6)
	beq $t0, $t7, yes_opponent

	lw $t0, -124($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -512($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -516($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -508($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -264($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -392($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -248($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -376($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, 8($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -8($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -140($t6)
	beq $t0, $t7, yes_opponent
	
	lw $t0, -116($t6)
	beq $t0, $t7, yes_opponent
	
	add $t5, $zero, $zero
	jr $ra
yes_opponent: 
	addi $t5, $zero, 1
	jr $ra
	

		
	
#get random num within a range to specifiy number of 4's to add platform in the horizontal line, cant be more than 24
random_address_generator:#genereate random address, store in $t9, with row number start passed in $t6
	li $v0, 42
	li $a0, 0
	li $a1, 24
	syscall
	addi $t9, $zero, 4 #t9 = 4
	mult $t9, $a0 #calc offset
	mflo $t8 #get value of offset from LO to $t8
	add $t9, $t8, $t6 #get position of platform start, on the line starting with address $t6
	jr $ra
	
	
draw_platform_fxn: #@param: $t9:start of platform location $t2: green color $t3: dark green color
	lw $t0, score
	addi $t1, $zero, 4
	bge $t0, $t1, shorter
	sw $t2, 0($t9) # paint the the point in $t9 green
	sw $t2, 4($t9)
	sw $t2, 8($t9)
	sw $t2, 12($t9)
	sw $t2, 16($t9)
	sw $t2, 20($t9) 
	sw $t2, 24($t9)
	sw $t2, 28($t9) #paint 8 pixels green starting from $t9
	
	
	sw $t3, 128($t9) # paint the the point in $t9 green
	sw $t3, 132($t9)
	sw $t3, 136($t9)
	sw $t3, 140($t9)
	sw $t3, 144($t9)
	sw $t3, 148($t9) 
	sw $t3, 152($t9)
	sw $t3, 156($t9) #paint 8 pixels green starting from $t9
	jr $ra
	
shorter:
	sw $t2, 0($t9) # paint the the point in $t9 green
	sw $t2, 4($t9)
	sw $t2, 8($t9)
	sw $t2, 12($t9)
	
	
	sw $t3, 128($t9) # paint the the point in $t9 green
	sw $t3, 132($t9)
	sw $t3, 136($t9)
	sw $t3, 140($t9)
	jr $ra

	
draw_doodle_fxn:
	sw $t2, -128($s2) 
	sw $t2, -132($s2) 
	sw $t2, -124($s2)
	
	sw $t2, -512($s2) 
	sw $t2, -516($s2) 
	sw $t2, -508($s2)
	
	sw $t2, -264($s2)
	sw $t2, -392($s2)
	
	sw $t2, -248($s2)
	sw $t2, -376($s2)
	
	
	#sw $t2, -384($s2)
	#sw $t2, -256($s2) 
	#sw $t2, -260($s2) 
	#sw $t2, -252($s2)
	
	
	sw $t2, 8($s2)
	#sw $t2, 12($s2) 
	sw $t2, -8($s2) 
	#sw $t2, -12($s2) 
	
	sw $t2, -140($s2) 
	sw $t2, -116($s2)
	jr $ra
	
draw_opponent_fxn: #$s2: opponent location, $t3: eyes colour, $t2: body colour
	sw $t2, -128($s2) 
	sw $t2, -132($s2) 
	sw $t2, -124($s2)
	
	sw $t2, -384($s2)
	sw $t2, -256($s2) 
	sw $t2, -260($s2) 
	sw $t2, -252($s2)
	
	
	sw $t2, 8($s2)
	sw $t2, 12($s2) 
	sw $t2, -8($s2) 
	sw $t2, -12($s2) 
	
	sw $t2, -144($s2) 
	sw $t2, -112($s2)
	jr $ra
	
draw_sky_fxn:
DRAW_SKY_LOOP:
	beq $t0, $t1, DRAW_SKY_END #if top left == right bottom
	sw $t3, 0($t0) #paint $t0 with color in $t3
	addi $t0, $t0, 4 #$t0 = $t0 + 4
	j DRAW_SKY_LOOP
DRAW_SKY_END:	
	jr $ra
	
copy_to_bitmap: #copy everything from canvas to bitmap
	lw $t8, topLeftAddress
	la $t9, canvas
	add $t0, $zero, $zero
	addi $t1, $zero, 1024
COPY_LOOP:
	bge $t0, $t1, COPY_END
	sll $t2, $t0, 2
	add $t3, $t8, $t2
	add $t4, $t9, $t2
	lw $t5, 0($t4)
	sw $t5, 0($t3)
COPY_UPDATE:
	addi $t0, $t0, 1
	j COPY_LOOP
COPY_END:
	jr $ra
	
	
